name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**/*.md"

env:
  CARGO_TERM_COLOR: always

jobs:
  # -------------------------- test --------------------------
  valgrind_test:
    name: Valgrind test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install valgrind and llvm
        run: sudo apt update && sudo apt install -y valgrind libclang-dev

      - uses: dart-lang/setup-dart@v1

      - name: Install ffigen
        run: dart pub global activate ffigen ^6.0.1

      - name: Install dart dependencies
        working-directory: ./frb_example/pure_dart/dart
        run: dart pub get

      - name: Run valgrind script
        working-directory: ./frb_example/pure_dart/dart
        run: chmod +x ./run.sh ./valgrind_util.py && ./run.sh
        env:
          CARGO_TARGET_DIR: /home/runner # NOTE here, must be an absolute path, since in my script uses it in multiple different directories

  # ref https://medium.com/flutter-community/run-flutter-driver-tests-on-github-actions-13c639c7e4ab
  flutter_ios_test:
    name: Flutter (iOS) integration test
    runs-on: macOS-latest

    strategy:
      matrix:
        device:
          - "iPad (7th generation) Simulator (15.2)"
          - "iPhone 12 Pro Max Simulator (15.2)"
      fail-fast: false

    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: "Start Simulator"
        run: |
          # the extra "(" is to avoid matching things like "iPhone 12 Pro Max Simulator (15.2) + Apple Watch Series 5 - 44mm (8.0)"
          UDID=$(xcrun xctrace list devices | grep '${{ matrix.device }} (' | awk '{print $NF}' | tr -d '()')
          echo UDID=$UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install cargo lipo
        run: cargo install cargo-lipo && rustup target add aarch64-apple-ios x86_64-apple-ios

      - name: Install Flutter dependencies
        working-directory: ./frb_example/with_flutter
        run: flutter pub get

      - name: Build Rust lib
        working-directory: ./frb_example/with_flutter/rust
        # note the "-i '' -e" is a bug of sed specific to MacOS https://stackoverflow.com/questions/19456518
        run: |
          sed -i '' -e 's/"cdylib"/"staticlib"/g' Cargo.toml
          cargo lipo
          cp target/universal/debug/libflutter_rust_bridge_example.a ../ios/Runner

      - name: Run Flutter integration tests
        working-directory: ./frb_example/with_flutter
        run: flutter test integration_test/main.dart --verbose

  # ref https://betterprogramming.pub/test-flutter-apps-on-android-with-github-actions-abdba2137b4
  flutter_android_test:
    name: Flutter (Android) integration test
    runs-on: macos-latest

    strategy:
      matrix:
        device:
          - "pixel"
          - "Nexus 6"
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      
      # #499, https://github.com/actions/virtual-environments/issues/5595
      - name: Configure ndk
        run: |
           ANDROID_HOME=$HOME/Library/Android/sdk
           SDKMANAGER=$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager
           
           echo y | $SDKMANAGER "ndk;21.4.7075529"
           
           ln -sfn $ANDROID_HOME/ndk/21.4.7075529 $ANDROID_HOME/ndk-bundle

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      - uses: actions/setup-java@v1
        with:
          java-version: "8.x" # "betterprogramming.pub" says must be java "8"

      - name: Install cargo ndk
        run: cargo install cargo-ndk && rustup target add x86_64-linux-android

      - name: Install Flutter dependencies
        working-directory: ./frb_example/with_flutter
        run: flutter pub get

      - name: Build Rust lib
        working-directory: ./frb_example/with_flutter/rust
        # NOTE since run on simulator, need -t to be x86_64. For real devices, of course arm-like ones.
        run: cargo ndk -t x86_64 -o ../android/app/src/main/jniLibs build

      - name: Run Flutter integration tests
        id: run_flutter_integration_test
        continue-on-error: true
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: ${{ matrix.device }}
          script: |
            cd frb_example/with_flutter && flutter test integration_test/main.dart --verbose

      # flaky GitHub Action testing environment... have to retry
      # see https://github.com/fzyzcjy/flutter_rust_bridge/issues/47
      - name: Run Flutter integration tests (retry)
        id: run_flutter_integration_test_retry_1
        if: steps.run_flutter_integration_test.outcome == 'failure'
        continue-on-error: true
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: ${{ matrix.device }}
          script: |
            cd frb_example/with_flutter && flutter test integration_test/main.dart --verbose

      # https://github.community/t/how-to-retry-a-failed-step-in-github-actions-workflow/125880
      - name: Set status
        if: always()
        run: |
          if ${{ steps.run_flutter_integration_test.outcome=='success' || steps.run_flutter_integration_test_retry_1.outcome=='success' }}; then
             echo fine
          else
             exit 1
          fi

  flutter_windows_test:
    name: Flutter (Windows) integration test
    runs-on: windows-2019

    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - uses: actions/checkout@v2

      - name: Enable platform support
        run: flutter config --enable-windows-desktop

      - name: Install Flutter dependencies
        working-directory: ./frb_example/with_flutter
        run: flutter pub get

      - name: Run Flutter integration tests
        working-directory: ./frb_example/with_flutter
        run: flutter test -d windows integration_test/main.dart --verbose

      - name: Install Corrosion
        run: |
          git clone https://github.com/corrosion-rs/corrosion.git
          cmake -Scorrosion -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build --config Release
          echo "C:\Program Files (x86)\Corrosion" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run Flutter integration tests explicitly requiring Corrosion
        working-directory: ./frb_example/with_flutter
        run: |
          mv -Force windows/rust.require.cmake windows/rust.cmake
          flutter test -d windows integration_test/main.dart --verbose

  flutter_macos_test:
    name: Flutter (macOS) integration test
    runs-on: macos-11

    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      - uses: actions/checkout@v2

      - name: Enable platform support
        run: flutter config --enable-macos-desktop

      - name: Install Flutter dependencies
        working-directory: ./frb_example/with_flutter
        run: flutter pub get

      - name: Run Flutter integration tests
        working-directory: ./frb_example/with_flutter
        run: flutter test -d macos integration_test/main.dart --verbose

  flutter_linux_test:
    name: Flutter (Linux) integration test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      # From Flutter Gallery CI
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Install Flutter build tools
        run: sudo apt update && sudo apt-get -y install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libglu1-mesa

      - run: flutter config --enable-linux-desktop

      - run: flutter doctor -v

      - run: flutter pub get
        working-directory: ./frb_example/with_flutter

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Run Flutter integration tests
        working-directory: ./frb_example/with_flutter
        run: flutter test -d linux integration_test/main.dart --verbose

      - name: Install Corrosion
        run: |
          set -euxo pipefail
          git clone https://github.com/corrosion-rs/corrosion.git
          cmake -Scorrosion -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          sudo cmake --install build --config Release

      - name: Run Flutter integration tests explicitly requiring Corrosion
        working-directory: ./frb_example/with_flutter
        run: |
          set -euxo pipefail
          mv linux/rust.require.cmake linux/rust.cmake
          flutter test -d linux integration_test/main.dart --verbose

  # -------------------------- linter --------------------------
  rust_build_and_test:
    name: Build and run Rust
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: dart-lang/setup-dart@v1
      - name: Install ffigen
        run: dart pub global activate ffigen ^6.0.1
      - name: Install llvm dependency (Linux)
        run: sudo apt update && sudo apt-get install -y libclang-dev
      - name: Build codegen
        working-directory: ./frb_codegen
        run: cargo build --verbose
      - name: Run tests for codegen
        working-directory: ./frb_codegen
        run: cargo test --verbose

      - name: Build rust runtime
        working-directory: ./frb_rust
        run: cargo build --verbose
      - name: Run tests for rust runtime
        working-directory: ./frb_rust
        run: cargo test --verbose

      - name: Build macros
        working-directory: ./frb_macros
        run: cargo build --verbose
      - name: Run tests for macros
        working-directory: ./frb_macros
        run: cargo test --verbose

      - name: Build pure_dart example
        working-directory: ./frb_example/pure_dart/rust
        run: cargo build --verbose
      - name: Run tests for pure_dart example
        working-directory: ./frb_example/pure_dart/rust
        run: cargo test --verbose

      - name: Build with_flutter example
        working-directory: ./frb_example/with_flutter/rust
        run: cargo build --verbose
      - name: Run tests for with_flutter example
        working-directory: ./frb_example/with_flutter/rust
        run: cargo test --verbose

  rust_linter:
    name: Rust linter using Clippy and rustfmt
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cargo_toolchain_version:
          - stable
          - 1.55.0

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.cargo_toolchain_version }}
          components: rustfmt, clippy

      - uses: dart-lang/setup-dart@v1
      - name: Install ffigen
        run: dart pub global activate ffigen ^6.0.1
      - name: Install llvm dependency (Linux)
        run: sudo apt update && sudo apt-get install -y libclang-dev

      - name: Run fmt for codegen
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_codegen/Cargo.toml --all -- --check
      - name: Run clippy for codegen
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_codegen/Cargo.toml -- -D warnings

      - name: Run fmt for rust runtime
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_rust/Cargo.toml --all -- --check
      - name: Run clippy for rust runtime
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_rust/Cargo.toml -- -D warnings

      - name: Run fmt for rust macros
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_macros/Cargo.toml --all -- --check
      - name: Run clippy for rust macros
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_macros/Cargo.toml -- -D warnings

      - name: Run fmt for pure_dart example
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_example/pure_dart/rust/Cargo.toml --all -- --check
      - name: Run clippy for pure_dart example
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_example/pure_dart/rust/Cargo.toml -- -D warnings

      - name: Run fmt for with_flutter example
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_example/with_flutter/rust/Cargo.toml --all -- --check
      - name: Run clippy for with_flutter example
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_example/with_flutter/rust/Cargo.toml -- -D warnings

  dart_linter:
    name: Dart linter using analyze and format

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies for dart runtime
        working-directory: ./frb_dart
        run: dart pub get
      - name: Verify formatting for dart runtime
        working-directory: ./frb_dart
        # 80 instead of 120
        run: dart format --output=none --set-exit-if-changed --line-length 80 .
      - name: Analyze project source for dart runtime
        working-directory: ./frb_dart
        run: dart analyze --fatal-infos

      - name: Install dependencies for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart pub get
      - name: Verify formatting for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart format --output=none --set-exit-if-changed --line-length 120 .
      - name: Analyze project source for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart analyze --fatal-infos

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Install dependencies for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter pub get
      - name: Verify formatting for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter format --output=none --set-exit-if-changed --line-length 120 .
      - name: Analyze project source for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter analyze --fatal-infos

      - name: Install pana
        run: flutter pub global activate pana

      - name: Analyze dart package using pana
        working-directory: ./frb_dart
        run: pana --no-warning --line-length 80 --exit-code-threshold 0

  # -------------------------- codegen --------------------------
  codegen:
    name: Run codegen

    strategy:
      fail-fast: false
      matrix:
        os:
          - image: macos-10.15
            family: osx
          - image: macos-11
            family: osx
          - image: windows-2019
            family: windows
          # #113
          # - image: ubuntu-18.04
          #  family: linux
          - image: ubuntu-20.04
            family: linux

    runs-on: ${{ matrix.os.image }}

    steps:
      - uses: actions/checkout@v2

      - uses: dart-lang/setup-dart@v1

      - name: Install dart global dependency
        run: dart pub global activate ffigen ^6.0.1

      # needed by `ffigen`, see https://github.com/dart-lang/ffigen#installing-llvm
      - name: Install llvm dependency (Linux)
        if: ${{ matrix.os.family == 'linux' }}
        run: sudo apt update && sudo apt-get install -y libclang-dev

      # NOTE in windows, need "\\" instead of "/"
      - name: Run codegen to pure_dart example (non-windows)
        if: ${{ matrix.os.family != 'windows' }}
        working-directory: ./frb_codegen
        run: cargo run --package flutter_rust_bridge_codegen --bin flutter_rust_bridge_codegen -- --rust-input ../frb_example/pure_dart/rust/src/api.rs --dart-output ../frb_example/pure_dart/dart/lib/bridge_generated.dart --dart-format-line-length 120
        env:
          RUST_LOG: debug
      - name: Run codegen to pure_dart example (windows)
        if: ${{ matrix.os.family == 'windows' }}
        working-directory: ./frb_codegen
        run: cargo run --package flutter_rust_bridge_codegen --bin flutter_rust_bridge_codegen -- --rust-input ..\\frb_example\\pure_dart\\rust\\src\\api.rs --dart-output ..\\frb_example\\pure_dart\\dart\\lib\\bridge_generated.dart --dart-format-line-length 120
        env:
          RUST_LOG: debug

      - name: Run codegen to with_flutter example (non-windows)
        if: ${{ matrix.os.family != 'windows' }}
        working-directory: ./frb_codegen
        run: cargo run --package flutter_rust_bridge_codegen --bin flutter_rust_bridge_codegen -- --rust-input ../frb_example/with_flutter/rust/src/api.rs --dart-output ../frb_example/with_flutter/lib/bridge_generated.dart --c-output ../frb_example/with_flutter/ios/Runner/bridge_generated.h --dart-format-line-length 120
        env:
          RUST_LOG: debug
      - name: Run codegen to with_flutter example (windows)
        if: ${{ matrix.os.family == 'windows' }}
        working-directory: ./frb_codegen
        run: cargo run --package flutter_rust_bridge_codegen --bin flutter_rust_bridge_codegen -- --rust-input ..\\frb_example\\with_flutter\\rust\\src\\api.rs --dart-output ..\\frb_example\\with_flutter\\lib\\bridge_generated.dart --c-output ..\\frb_example\\with_flutter\\ios\\Runner\\bridge_generated.h --dart-format-line-length 120
        env:
          RUST_LOG: debug

      # #467
      - name: "Modify cross-platform code (osx)"
        if: ${{ matrix.os.family == 'osx' }}
        # note the "-i '' -e" is a bug of sed specific to MacOS https://stackoverflow.com/questions/19456518
        run: sed -i '' -e 's/^typedef uintptr_t =.*$/typedef uintptr_t = ffi.UnsignedLong;/g' frb_example/pure_dart/dart/lib/bridge_generated.dart
      - name: "Modify cross-platform code (non-osx)"
        if: ${{ matrix.os.family != 'osx' }}
        run: sed -i -e 's/^typedef uintptr_t =.*$/typedef uintptr_t = ffi.UnsignedLong;/g' frb_example/pure_dart/dart/lib/bridge_generated.dart

      - name: "Check no code change (If fail: Please ensure you have run codegen on examples and commit those changes! On Windows, see https://github.com/fzyzcjy/flutter_rust_bridge/pull/536#issuecomment-1170259918 for additional instructions.)"
        run: git diff --exit-code
